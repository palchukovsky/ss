// Code generated by MockGen. DO NOT EDIT.
// Source: log.go

// Package mock_ss is a generated GoMock package.
package mock_ss

import (
	gomock "github.com/golang/mock/gomock"
	ss "github.com/palchukovsky/ss"
	reflect "reflect"
)

// MockServiceLog is a mock of ServiceLog interface
type MockServiceLog struct {
	ctrl     *gomock.Controller
	recorder *MockServiceLogMockRecorder
}

// MockServiceLogMockRecorder is the mock recorder for MockServiceLog
type MockServiceLogMockRecorder struct {
	mock *MockServiceLog
}

// NewMockServiceLog creates a new mock instance
func NewMockServiceLog(ctrl *gomock.Controller) *MockServiceLog {
	mock := &MockServiceLog{ctrl: ctrl}
	mock.recorder = &MockServiceLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceLog) EXPECT() *MockServiceLogMockRecorder {
	return m.recorder
}

// NewSession mocks base method
func (m *MockServiceLog) NewSession(prefix string) ss.ServiceLog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession", prefix)
	ret0, _ := ret[0].(ss.ServiceLog)
	return ret0
}

// NewSession indicates an expected call of NewSession
func (mr *MockServiceLogMockRecorder) NewSession(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockServiceLog)(nil).NewSession), prefix)
}

// CheckExit mocks base method
func (m *MockServiceLog) CheckExit(panicErr interface{}, getPanicDetails func() string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CheckExit", panicErr, getPanicDetails)
}

// CheckExit indicates an expected call of CheckExit
func (mr *MockServiceLogMockRecorder) CheckExit(panicErr, getPanicDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExit", reflect.TypeOf((*MockServiceLog)(nil).CheckExit), panicErr, getPanicDetails)
}

// Started mocks base method
func (m *MockServiceLog) Started() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Started")
}

// Started indicates an expected call of Started
func (mr *MockServiceLogMockRecorder) Started() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Started", reflect.TypeOf((*MockServiceLog)(nil).Started))
}

// Debug mocks base method
func (m *MockServiceLog) Debug(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug
func (mr *MockServiceLogMockRecorder) Debug(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockServiceLog)(nil).Debug), varargs...)
}

// Info mocks base method
func (m *MockServiceLog) Info(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info
func (mr *MockServiceLogMockRecorder) Info(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockServiceLog)(nil).Info), varargs...)
}

// Warn mocks base method
func (m *MockServiceLog) Warn(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn
func (mr *MockServiceLogMockRecorder) Warn(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockServiceLog)(nil).Warn), varargs...)
}

// Error mocks base method
func (m *MockServiceLog) Error(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error
func (mr *MockServiceLogMockRecorder) Error(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockServiceLog)(nil).Error), varargs...)
}

// Err mocks base method
func (m *MockServiceLog) Err(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Err", err)
}

// Err indicates an expected call of Err
func (mr *MockServiceLogMockRecorder) Err(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockServiceLog)(nil).Err), err)
}

// Panic mocks base method
func (m *MockServiceLog) Panic(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panic", varargs...)
}

// Panic indicates an expected call of Panic
func (mr *MockServiceLogMockRecorder) Panic(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockServiceLog)(nil).Panic), varargs...)
}
